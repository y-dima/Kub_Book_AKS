# This is a basic workflow to help you get started with Actions

name: Pipeline
# Controls wehn the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch 
  push:
    branches: [ main ]
    paths:
    - Chapter15/**
    - .github/workflows/pipeline.yml
  # Allows you to run this workflow manually from the Actions tab.
  workflow_dispatch:
  # EEnv to set reusable variables
env:
  ACRNAME: dmyacr
  RG: Kub-RG
  CLUSTER: dmykub

jobs:
  # this workflow contains a single job calleed "CI"
  CI:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    # Steps represent a sequence of tasks that will be executed as a part of a job.
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Git checkout
        uses: actions/checkout@v2
        
      - name: Azure Login
        uses: Azure/login@v1.4.4
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: ACR login
        run: az acr login -n $ACRNAME
        
      - name: Docker Build & Push Action
        uses: docker/build-push-action@v2
        with:
          context: ./Chapter15
          push: true
          tags: ${{ env.ACRNAME }}.azurecr.io/website/website:${{ github.run_number }}

  CD:
    runs-on: ubuntu-latest
    needs: CI
    steps:
      - name: Git checkout
        uses: actions/checkout@v2
        
      - name: Azure Kubernetes set context
        uses: Azure/aks-set-context@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          resource-group: ${{ env.RG }}
          cluster-name: ${{ env.CLUSTER }}
          
      - name: Helm upgrade
        run: |
          helm upgrade website Chapter15/website --install \
            --set image.repository=$ACRNAME.azurecr.io/website/website \
            --set image.tag=${{ github.run_number }}
            
      - name: Get service IP
        run: |
          PUBLICPI=""
          while [ -z $PUBLICIP ]; do
            echo "Waiting for public IP..."
            PUBLICIP=(kubectl get service website -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            [ -z "$PUBLICIP" ] && sleep 10
          done
          echo $PUBLICIP
